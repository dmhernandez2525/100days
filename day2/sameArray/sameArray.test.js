const comp = require('./sameArray');

describe('Same Array Function', () => {
  test('True cases', () => {
    expect(
      comp(
        [5, 6, 2, 0, 2, 9, 2, 5, 6, 4, 2, 9, 3, 1, 1, 8, 5, 0, 0],
        [64, 81, 0, 25, 25, 0, 1, 1, 4, 0, 4, 4, 4, 36, 25, 81, 9, 16, 36]
      )
    ).toBe(true);

    expect(
      comp(
        [10, 8, 3, 3, 2, 6, 1, 5, 4, 4, 10, 4, 10, 8],
        [64, 9, 16, 25, 9, 4, 16, 64, 100, 36, 100, 100, 1, 16]
      )
    ).toBe(true);

    expect(
      comp(
        [4, 10, 0, 1, 9, 6, 9, 9, 8, 7, 2, 0, 9, 1, 9, 4, 8, 6],
        [36, 16, 100, 81, 0, 64, 64, 36, 81, 49, 81, 81, 4, 1, 0, 1, 81, 16]
      )
    ).toBe(true);

    expect(
      comp(
        [1, 8, 5, 10, 2, 0, 2, 2, 2, 1, 9, 9, 7],
        [100, 49, 0, 4, 25, 4, 64, 81, 4, 4, 81, 1, 1]
      )
    ).toBe(true);

    expect(
      comp(
        [10, 1, 1, 5, 9, 5, 5, 10, 8, 3, 5, 9, 4],
        [81, 25, 25, 1, 100, 16, 25, 1, 81, 100, 9, 64, 25]
      )
    ).toBe(true);

    expect(
      comp(
        [5, 3, 8, 7, 3, 4, 8, 3, 0, 7, 8, 2, 5, 0, 4],
        [64, 64, 16, 4, 9, 49, 25, 0, 9, 16, 64, 0, 25, 9, 49]
      )
    ).toBe(true);

    expect(
      comp(
        [9, 10, 7, 1, 9, 7, 2, 9, 10, 7, 2, 5, 9, 4, 9],
        [1, 16, 81, 81, 49, 81, 49, 81, 49, 100, 25, 4, 81, 100, 4]
      )
    ).toBe(true);

    expect(
      comp(
        [9, 5, 7, 4, 8, 5, 9, 5, 8, 1, 6, 1],
        [25, 16, 64, 25, 81, 64, 81, 36, 49, 1, 25, 1]
      )
    ).toBe(true);

    expect(
      comp(
        [9, 6, 6, 5, 5, 4, 4, 4, 2, 7, 1, 0, 2],
        [81, 4, 16, 0, 1, 36, 49, 36, 16, 16, 25, 25, 4]
      )
    ).toBe(true);

    expect(
      comp(
        [3, 0, 4, 0, 2, 4, 4, 2, 5, 5, 8, 1, 9, 0, 0, 10],
        [0, 4, 0, 64, 25, 81, 100, 9, 4, 16, 0, 1, 16, 16, 25, 0]
      )
    ).toBe(true);

    expect(
      comp(
        [7, 7, 0, 0, 5, 1, 3, 2, 2, 7, 7],
        [4, 0, 0, 4, 49, 25, 49, 49, 49, 9, 1]
      )
    ).toBe(true);

    expect(
      comp(
        [7, 2, 2, 1, 4, 10, 3, 7, 7, 0, 1, 1, 2, 8, 1, 6, 5, 10],
        [0, 4, 1, 49, 49, 100, 1, 64, 9, 4, 4, 36, 25, 1, 100, 1, 16, 49]
      )
    ).toBe(true);

    expect(
      comp(
        [3, 3, 10, 6, 0, 4, 6, 6, 8, 6, 0, 6, 4, 0],
        [36, 0, 36, 36, 16, 0, 64, 36, 9, 9, 16, 0, 100, 36]
      )
    ).toBe(true);

    expect(
      comp(
        [0, 4, 7, 2, 9, 10, 6, 1, 10, 7, 1],
        [100, 81, 1, 36, 1, 0, 16, 4, 49, 49, 100]
      )
    ).toBe(true);

    expect(
      comp(
        [0, 0, 1, 5, 10, 10, 0, 1, 8, 7, 9, 5, 5, 2, 9, 5, 0, 2],
        [4, 64, 100, 81, 25, 25, 25, 0, 81, 100, 49, 1, 4, 1, 25, 0, 0, 0]
      )
    ).toBe(true);

    expect(
      comp(
        [0, 10, 5, 1, 0, 10, 6, 10, 9, 5, 9, 0, 8],
        [25, 100, 0, 25, 100, 81, 1, 100, 0, 36, 0, 81, 64]
      )
    ).toBe(true);

    expect(
      comp(
        [2, 0, 9, 2, 3, 3, 4, 3, 1, 3, 3, 4, 10, 1, 0, 0, 1, 5],
        [4, 100, 9, 1, 4, 9, 25, 16, 0, 16, 9, 9, 81, 1, 9, 0, 1, 0]
      )
    ).toBe(true);

    expect(
      comp(
        [7, 1, 0, 9, 1, 0, 4, 1, 3, 10, 7],
        [49, 1, 49, 1, 0, 81, 16, 100, 9, 0, 1]
      )
    ).toBe(true);

    expect(
      comp(
        [4, 8, 10, 8, 2, 5, 3, 8, 10, 2],
        [9, 100, 64, 100, 4, 16, 25, 64, 64, 4]
      )
    ).toBe(true);

    expect(
      comp(
        [9, 4, 2, 3, 2, 2, 3, 5, 8, 1, 2, 8, 0, 10, 10, 8],
        [4, 100, 9, 100, 4, 4, 1, 0, 64, 64, 16, 4, 64, 25, 81, 9]
      )
    ).toBe(true);

    expect(
      comp(
        [2, 10, 7, 8, 8, 7, 0, 1, 2, 4, 6, 8, 9, 8, 1],
        [64, 0, 1, 4, 64, 16, 81, 4, 1, 36, 49, 100, 64, 64, 49]
      )
    ).toBe(true);
  });
  test('False cases', () => {
    expect(
      comp(
        [4, 2, 7, 1, 7, 6, 8, 2, 5, 5],
        [4, 25, 49, 64, 25, 36, 4, 1, 16, 50]
      )
    ).toBe(false);

    expect(
      comp(
        [4, 10, 1, 0, 9, 6, 2, 8, 0, 0, 3, 0, 1, 0, 4, 5],
        [0, 0, 25, 1, 16, 0, 64, 16, 2, 9, 81, 0, 4, 100, 0, 36]
      )
    ).toBe(false);

    expect(
      comp(
        [6, 3, 5, 5, 10, 2, 1, 4, 6, 3, 8, 2, 1, 1, 10, 6],
        [25, 36, 4, 36, 16, 4, 1, 9, 64, 36, 1, 9, 100, 100, 2, 25]
      )
    ).toBe(false);

    expect(
      comp(
        [2, 10, 1, 5, 4, 3, 1, 6, 9, 10, 5, 4, 8, 3, 5, 7],
        [9, 100, 1, 1, 4, 25, 50, 25, 64, 25, 100, 16, 16, 9, 81, 36]
      )
    ).toBe(false);

    expect(
      comp(
        [7, 8, 1, 5, 3, 10, 0, 9, 2, 2, 7, 6, 6, 5, 6, 3, 2],
        [64, 25, 4, 0, 9, 4, 9, 25, 36, 36, 1, 49, 36, 82, 100, 49, 4]
      )
    ).toBe(false);

    expect(
      comp([8, 7, 2, 0, 1, 10, 0, 0, 7, 2], [0, 1, 4, 65, 100, 4, 49, 49, 0, 0])
    ).toBe(false);

    expect(
      comp(
        [7, 10, 0, 9, 8, 7, 5, 9, 2, 1],
        [81, 100, 64, 49, 1, 1, 49, 25, 4, 81]
      )
    ).toBe(false);

    expect(
      comp(
        [1, 2, 2, 9, 9, 7, 8, 8, 2, 7, 4, 5],
        [81, 16, 4, 49, 64, 4, 1, 4, 49, 82, 25, 64]
      )
    ).toBe(false);

    expect(
      comp(
        [5, 0, 10, 5, 4, 9, 0, 8, 5, 2, 6, 1, 2, 0, 3],
        [36, 0, 65, 4, 9, 4, 25, 0, 100, 25, 0, 81, 1, 25, 16]
      )
    ).toBe(false);
  });
});
